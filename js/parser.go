// generated by Textmapper; DO NOT EDIT

package js

import (
	"context"
	"fmt"
)

// ErrorHandler is called every time a parser is unable to process some part of the input.
// This handler can return false to abort the parser.
type ErrorHandler func(err SyntaxError) bool

// StopOnFirstError is an error handler that forces the parser to stop on and return the first
// error.
func StopOnFirstError(_ SyntaxError) bool { return false }

type SyntaxError struct {
	Line      int
	Offset    int
	Endoffset int
}

func (e SyntaxError) Error() string {
	return fmt.Sprintf("syntax error at line %v", e.Line)
}

func (p *Parser) Parse(ctx context.Context, lexer *Lexer) error {
	return p.parse(ctx, 7, 6524, lexer)
}

func lookaheadRule(ctx context.Context, lexer *Lexer, next, rule int32, s *session) (sym int32, err error) {
	switch rule {
	case 4338:
		var ok bool
		if ok, err = lookahead(ctx, lexer, next, 0, 6516, s); ok {
			sym = 702 /* lookahead_StartOfArrowFunction */
		} else {
			sym = 169 /* lookahead_notStartOfArrowFunction */
		}
		return
	case 4339:
		var ok bool
		if ok, err = lookahead(ctx, lexer, next, 3, 6519, s); ok {
			sym = 783 /* lookahead_StartOfTypeImport */
		} else {
			sym = 782 /* lookahead_notStartOfTypeImport */
		}
		return
	case 4340:
		var ok bool
		if ok, err = lookahead(ctx, lexer, next, 1, 6517, s); ok {
			sym = 346 /* lookahead_StartOfParametrizedCall */
		} else {
			sym = 302 /* lookahead_notStartOfParametrizedCall */
		}
		return
	case 4341:
		var ok bool
		if ok, err = lookahead(ctx, lexer, next, 4, 6520, s); ok {
			sym = 840 /* lookahead_StartOfIs */
		} else {
			sym = 845 /* lookahead_notStartOfIs */
		}
		return
	case 4342:
		var ok bool
		if ok, err = lookahead(ctx, lexer, next, 6, 6522, s); ok {
			sym = 878 /* lookahead_StartOfMappedType */
		} else {
			sym = 868 /* lookahead_notStartOfMappedType */
		}
		return
	case 4343:
		var ok bool
		if ok, err = lookahead(ctx, lexer, next, 5, 6521, s); ok {
			sym = 887 /* lookahead_StartOfFunctionType */
		} else {
			sym = 861 /* lookahead_notStartOfFunctionType */
		}
		return
	case 4344:
		var ok bool
		if ok, err = lookahead(ctx, lexer, next, 2, 6518, s); ok {
			sym = 758 /* lookahead_StartOfExtendsTypeRef */
		} else {
			sym = 757 /* lookahead_notStartOfExtendsTypeRef */
		}
		return
	}
	return 0, nil
}

func AtStartOfArrowFunction(ctx context.Context, lexer *Lexer, next int32, s *session) (bool, error) {
	return lookahead(ctx, lexer, next, 0, 6516, s)
}

func AtStartOfParametrizedCall(ctx context.Context, lexer *Lexer, next int32, s *session) (bool, error) {
	return lookahead(ctx, lexer, next, 1, 6517, s)
}

func AtStartOfExtendsTypeRef(ctx context.Context, lexer *Lexer, next int32, s *session) (bool, error) {
	return lookahead(ctx, lexer, next, 2, 6518, s)
}

func AtStartOfTypeImport(ctx context.Context, lexer *Lexer, next int32, s *session) (bool, error) {
	return lookahead(ctx, lexer, next, 3, 6519, s)
}

func AtStartOfIs(ctx context.Context, lexer *Lexer, next int32, s *session) (bool, error) {
	return lookahead(ctx, lexer, next, 4, 6520, s)
}

func AtStartOfFunctionType(ctx context.Context, lexer *Lexer, next int32, s *session) (bool, error) {
	return lookahead(ctx, lexer, next, 5, 6521, s)
}

func AtStartOfMappedType(ctx context.Context, lexer *Lexer, next int32, s *session) (bool, error) {
	return lookahead(ctx, lexer, next, 6, 6522, s)
}

func lookahead(ctx context.Context, l *Lexer, next int32, start, end int16, s *session) (bool, error) {
	var lexer Lexer
	lexer.source = l.source
	lexer.ch = l.ch
	lexer.offset = l.offset
	lexer.tokenOffset = l.tokenOffset
	lexer.line = l.line
	lexer.tokenLine = l.tokenLine
	lexer.scanOffset = l.scanOffset
	lexer.State = l.State
	lexer.Dialect = l.Dialect
	lexer.token = l.token
	// Note: Stack is intentionally omitted.

	// Use memoization for recursive lookaheads.
	if next == noToken {
		next = lookaheadNext(&lexer, end, nil /*empty stack*/)
	}
	key := uint64(l.tokenOffset) + uint64(end)<<40
	if ret, ok := s.cache[key]; ok {
		return ret, nil
	}

	var allocated [64]stackEntry
	state := start
	stack := append(allocated[:0], stackEntry{state: state})

	for state != end {
		action := tmAction[state]
		if action < -2 {
			// Lookahead is needed.
			if next == noToken {
				next = lookaheadNext(&lexer, end, stack)
			}
			action = lalr(action, next)
		}

		if action >= 0 {
			// Reduce.
			rule := action
			ln := int(tmRuleLen[rule])

			var entry stackEntry
			entry.sym.symbol = tmRuleSymbol[rule]
			stack = stack[:len(stack)-ln]
			sym, err := lookaheadRule(ctx, &lexer, next, rule, s)
			if err != nil {
				return false, err
			}
			if sym != 0 {
				entry.sym.symbol = sym
			}
			state = gotoState(stack[len(stack)-1].state, entry.sym.symbol)
			entry.state = state
			stack = append(stack, entry)

		} else if action == -1 {
			if s.shiftCounter++; s.shiftCounter&0x1ff == 0 {
				// Note: checking for context cancellation is expensive so we do it from time to time.
				select {
				case <-ctx.Done():
					return false, ctx.Err()
				default:
				}
			}

			// Shift.
			if next == noToken {
				next = lookaheadNext(&lexer, end, stack)
			}
			state = gotoState(state, next)
			stack = append(stack, stackEntry{
				sym:   symbol{symbol: next},
				state: state,
			})
			if state != -1 && next != eoiToken {
				next = noToken
			}
		}

		if action == -2 || state == -1 {
			break
		}
	}

	s.cache[key] = state == end
	return state == end, nil
}

func lalr(action, next int32) int32 {
	a := -action - 3
	for ; tmLalr[a] >= 0; a += 2 {
		if tmLalr[a] == next {
			break
		}
	}
	return tmLalr[a+1]
}

func gotoState(state int16, symbol int32) int16 {
	min := tmGoto[symbol]
	max := tmGoto[symbol+1]

	if max-min < 32 {
		for i := min; i < max; i += 2 {
			if tmFromTo[i] == state {
				return tmFromTo[i+1]
			}
		}
	} else {
		for min < max {
			e := (min + max) >> 1 &^ int32(1)
			i := tmFromTo[e]
			if i == state {
				return tmFromTo[e+1]
			} else if i < state {
				min = e + 2
			} else {
				max = e
			}
		}
	}
	return -1
}

func (p *Parser) applyRule(ctx context.Context, rule int32, lhs *stackEntry, rhs []stackEntry, lexer *Lexer, s *session) (err error) {
	switch rule {
	case 1166: // Elision : ','
		p.listener(NoElement, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 1167: // Elision : Elision ','
		p.listener(NoElement, rhs[1].sym.offset, rhs[1].sym.endoffset)
	case 1235: // LiteralPropertyName : PrivateIdentifier
		p.listener(NameIdent, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 1239: // LiteralPropertyName_WithoutNew : PrivateIdentifier
		p.listener(NameIdent, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 1385: // MemberExpression_Await_StartWithLet : 'let'
		p.listener(ReferenceIdent, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 1554: // MemberExpression_StartWithLet : 'let'
		p.listener(ReferenceIdent, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 1560: // MemberExpression_StartWithLet_Yield : 'let'
		p.listener(ReferenceIdent, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 2453: // BinaryExpression : BinaryExpression .noLineBreak 'as' 'const'
		p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2471: // BinaryExpression_Await : BinaryExpression_Await .noLineBreak 'as' 'const'
		p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2490: // BinaryExpression_Await_In : BinaryExpression_Await_In .noLineBreak 'as' 'const'
		p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2526: // BinaryExpression_Await_In_NoObjLiteral : BinaryExpression_Await_In_NoObjLiteral .noLineBreak 'as' 'const'
		p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2545: // BinaryExpression_Await_In_Yield : BinaryExpression_Await_In_Yield .noLineBreak 'as' 'const'
		p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2579: // BinaryExpression_Await_NoLet : BinaryExpression_Await_NoLet .noLineBreak 'as' 'const'
		p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2597: // BinaryExpression_Await_NoObjLiteral : BinaryExpression_Await_NoObjLiteral .noLineBreak 'as' 'const'
		p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2615: // BinaryExpression_Await_Yield : BinaryExpression_Await_Yield .noLineBreak 'as' 'const'
		p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2634: // BinaryExpression_In : BinaryExpression_In .noLineBreak 'as' 'const'
		p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2687: // BinaryExpression_In_NoFuncClass : BinaryExpression_In_NoFuncClass .noLineBreak 'as' 'const'
		p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2706: // BinaryExpression_In_NoObjLiteral : BinaryExpression_In_NoObjLiteral .noLineBreak 'as' 'const'
		p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2725: // BinaryExpression_In_Yield : BinaryExpression_In_Yield .noLineBreak 'as' 'const'
		p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2775: // BinaryExpression_NoLet : BinaryExpression_NoLet .noLineBreak 'as' 'const'
		p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2793: // BinaryExpression_NoLet_Yield : BinaryExpression_NoLet_Yield .noLineBreak 'as' 'const'
		p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2811: // BinaryExpression_NoObjLiteral : BinaryExpression_NoObjLiteral .noLineBreak 'as' 'const'
		p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2829: // BinaryExpression_Yield : BinaryExpression_Yield .noLineBreak 'as' 'const'
		p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3252: // ElementElision : ','
		p.listener(NoElement, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 3253: // ElementElision : Elision ','
		p.listener(NoElement, rhs[1].sym.offset, rhs[1].sym.endoffset)
	case 3311: // IterationStatement : 'for' '(' 'var' VariableDeclarationList ';' .forSC ForCondition ';' .forSC ForFinalExpression ')' Statement
		p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3315: // IterationStatement : 'for' '(' 'var' ForBinding 'in' Expression_In ')' Statement
		p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3318: // IterationStatement : 'for' '(' 'async' lookahead_notStartOfArrowFunction 'of' AssignmentExpression_In ')' Statement
		p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
		p.listener(IdentExpr, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3319: // IterationStatement : 'for' '(' 'var' ForBinding 'of' AssignmentExpression_In ')' Statement
		p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3325: // IterationStatement_Await : 'for' '(' 'var' VariableDeclarationList_Await ';' .forSC ForCondition_Await ';' .forSC ForFinalExpression_Await ')' Statement_Await
		p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3329: // IterationStatement_Await : 'for' '(' 'var' ForBinding_Await 'in' Expression_Await_In ')' Statement_Await
		p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3332: // IterationStatement_Await : 'for' '(' 'async' lookahead_notStartOfArrowFunction 'of' AssignmentExpression_Await_In ')' Statement_Await
		p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
		p.listener(IdentExpr, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3333: // IterationStatement_Await : 'for' '(' 'var' ForBinding_Await 'of' AssignmentExpression_Await_In ')' Statement_Await
		p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3339: // IterationStatement_Yield : 'for' '(' 'var' VariableDeclarationList_Yield ';' .forSC ForCondition_Yield ';' .forSC ForFinalExpression_Yield ')' Statement_Yield
		p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3343: // IterationStatement_Yield : 'for' '(' 'var' ForBinding_Yield 'in' Expression_In_Yield ')' Statement_Yield
		p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3346: // IterationStatement_Yield : 'for' '(' 'async' lookahead_notStartOfArrowFunction 'of' AssignmentExpression_In_Yield ')' Statement_Yield
		p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
		p.listener(IdentExpr, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3347: // IterationStatement_Yield : 'for' '(' 'var' ForBinding_Yield 'of' AssignmentExpression_In_Yield ')' Statement_Yield
		p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3694: // ImportDeclaration : 'import' lookahead_StartOfTypeImport 'type' ImportClause FromClause ';'
		p.listener(TsTypeOnly, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3701: // ImportRequireDeclaration : 'export' 'import' lookahead_notStartOfTypeImport BindingIdentifier '=' 'require' '(' StringLiteral ')' ';'
		p.listener(TsExport, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 3721: // ExportDeclaration : 'export' 'type' '*' 'as' ImportedBinding FromClause ';'
		p.listener(TsTypeOnly, rhs[1].sym.offset, rhs[1].sym.endoffset)
	case 3722: // ExportDeclaration : 'export' 'type' '*' FromClause ';'
		p.listener(TsTypeOnly, rhs[1].sym.offset, rhs[1].sym.endoffset)
	case 3725: // ExportDeclaration : 'export' 'type' ExportClause FromClause ';'
		p.listener(TsTypeOnly, rhs[1].sym.offset, rhs[1].sym.endoffset)
	case 3727: // ExportDeclaration : 'export' 'type' ExportClause ';'
		p.listener(TsTypeOnly, rhs[1].sym.offset, rhs[1].sym.endoffset)
	case 3749: // DecoratorMemberExpression : DecoratorMemberExpression '.' IdentifierName
		p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3851: // TypePredicate : 'asserts' lookahead_StartOfIs 'is' Type1
		p.listener(ReferenceIdent, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 3853: // TypePredicate1 : 'asserts' lookahead_StartOfIs 'is' Type1
		p.listener(ReferenceIdent, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 3854: // AssertsType : 'asserts' .noLineBreak lookahead_notStartOfIs 'this' 'is' Type
		p.listener(This, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3855: // AssertsType : 'asserts' .noLineBreak lookahead_notStartOfIs 'this'
		p.listener(This, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3856: // AssertsType : 'asserts' .noLineBreak lookahead_notStartOfIs IdentifierName_WithoutKeywords 'is' Type
		p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3857: // AssertsType : 'asserts' .noLineBreak lookahead_notStartOfIs IdentifierName_WithoutKeywords
		p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3858: // AssertsType1 : 'asserts' .noLineBreak lookahead_notStartOfIs 'this' 'is' Type1
		p.listener(This, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3859: // AssertsType1 : 'asserts' .noLineBreak lookahead_notStartOfIs 'this'
		p.listener(This, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3860: // AssertsType1 : 'asserts' .noLineBreak lookahead_notStartOfIs IdentifierName_WithoutKeywords 'is' Type1
		p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3861: // AssertsType1 : 'asserts' .noLineBreak lookahead_notStartOfIs IdentifierName_WithoutKeywords
		p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3891: // TypeOperator : 'infer' IdentifierName
		p.listener(ReferenceIdent, rhs[1].sym.offset, rhs[1].sym.endoffset)
	case 3896: // TypeOperator1 : 'infer' IdentifierName
		p.listener(ReferenceIdent, rhs[1].sym.offset, rhs[1].sym.endoffset)
	case 4056: // TypeQueryExpression : TypeQueryExpression '.' IdentifierName
		p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 4195: // IndexSignature : Modifiers '[' IdentifierName ':' 'string' ']' TypeAnnotation
		p.listener(NameIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
		p.listener(PredefinedType, rhs[4].sym.offset, rhs[4].sym.endoffset)
	case 4196: // IndexSignature : '[' IdentifierName ':' 'string' ']' TypeAnnotation
		p.listener(NameIdent, rhs[1].sym.offset, rhs[1].sym.endoffset)
		p.listener(PredefinedType, rhs[3].sym.offset, rhs[3].sym.endoffset)
	case 4197: // IndexSignature : Modifiers '[' IdentifierName ':' 'number' ']' TypeAnnotation
		p.listener(NameIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
		p.listener(PredefinedType, rhs[4].sym.offset, rhs[4].sym.endoffset)
	case 4198: // IndexSignature : '[' IdentifierName ':' 'number' ']' TypeAnnotation
		p.listener(NameIdent, rhs[1].sym.offset, rhs[1].sym.endoffset)
		p.listener(PredefinedType, rhs[3].sym.offset, rhs[3].sym.endoffset)
	case 4199: // IndexSignature_WithDeclare : Modifiers_WithDeclare '[' IdentifierName ':' 'string' ']' TypeAnnotation
		p.listener(NameIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
		p.listener(PredefinedType, rhs[4].sym.offset, rhs[4].sym.endoffset)
	case 4200: // IndexSignature_WithDeclare : '[' IdentifierName ':' 'string' ']' TypeAnnotation
		p.listener(NameIdent, rhs[1].sym.offset, rhs[1].sym.endoffset)
		p.listener(PredefinedType, rhs[3].sym.offset, rhs[3].sym.endoffset)
	case 4201: // IndexSignature_WithDeclare : Modifiers_WithDeclare '[' IdentifierName ':' 'number' ']' TypeAnnotation
		p.listener(NameIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
		p.listener(PredefinedType, rhs[4].sym.offset, rhs[4].sym.endoffset)
	case 4202: // IndexSignature_WithDeclare : '[' IdentifierName ':' 'number' ']' TypeAnnotation
		p.listener(NameIdent, rhs[1].sym.offset, rhs[1].sym.endoffset)
		p.listener(PredefinedType, rhs[3].sym.offset, rhs[3].sym.endoffset)
	case 4212: // EnumDeclaration : 'const' 'enum' BindingIdentifier EnumBody
		p.listener(TsConst, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 4238: // AmbientVariableDeclaration : 'var' AmbientBindingList ';'
		p.listener(Var, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 4239: // AmbientVariableDeclaration : 'let' AmbientBindingList ';'
		p.listener(LetOrConst, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 4240: // AmbientVariableDeclaration : 'const' AmbientBindingList ';'
		p.listener(LetOrConst, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 4254: // AmbientEnumDeclaration : 'const' 'enum' BindingIdentifier EnumBody
		p.listener(TsConst, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 4338:
		var ok bool
		if ok, err = AtStartOfArrowFunction(ctx, lexer, p.next.symbol, s); ok {
			lhs.sym.symbol = 702 /* lookahead_StartOfArrowFunction */
		} else {
			lhs.sym.symbol = 169 /* lookahead_notStartOfArrowFunction */
		}
		return
	case 4339:
		var ok bool
		if ok, err = AtStartOfTypeImport(ctx, lexer, p.next.symbol, s); ok {
			lhs.sym.symbol = 783 /* lookahead_StartOfTypeImport */
		} else {
			lhs.sym.symbol = 782 /* lookahead_notStartOfTypeImport */
		}
		return
	case 4340:
		var ok bool
		if ok, err = AtStartOfParametrizedCall(ctx, lexer, p.next.symbol, s); ok {
			lhs.sym.symbol = 346 /* lookahead_StartOfParametrizedCall */
		} else {
			lhs.sym.symbol = 302 /* lookahead_notStartOfParametrizedCall */
		}
		return
	case 4341:
		var ok bool
		if ok, err = AtStartOfIs(ctx, lexer, p.next.symbol, s); ok {
			lhs.sym.symbol = 840 /* lookahead_StartOfIs */
		} else {
			lhs.sym.symbol = 845 /* lookahead_notStartOfIs */
		}
		return
	case 4342:
		var ok bool
		if ok, err = AtStartOfMappedType(ctx, lexer, p.next.symbol, s); ok {
			lhs.sym.symbol = 878 /* lookahead_StartOfMappedType */
		} else {
			lhs.sym.symbol = 868 /* lookahead_notStartOfMappedType */
		}
		return
	case 4343:
		var ok bool
		if ok, err = AtStartOfFunctionType(ctx, lexer, p.next.symbol, s); ok {
			lhs.sym.symbol = 887 /* lookahead_StartOfFunctionType */
		} else {
			lhs.sym.symbol = 861 /* lookahead_notStartOfFunctionType */
		}
		return
	case 4344:
		var ok bool
		if ok, err = AtStartOfExtendsTypeRef(ctx, lexer, p.next.symbol, s); ok {
			lhs.sym.symbol = 758 /* lookahead_StartOfExtendsTypeRef */
		} else {
			lhs.sym.symbol = 757 /* lookahead_notStartOfExtendsTypeRef */
		}
		return
	}
	if nt := tmRuleType[rule]; nt != 0 {
		p.listener(nt, lhs.sym.offset, lhs.sym.endoffset)
	}
	return
}

const errSymbol = 2

func (p *Parser) skipBrokenCode(lexer *Lexer, stack []stackEntry, canRecover func(symbol int32) bool) int {
	var e int
	for p.next.symbol != eoiToken && !canRecover(p.next.symbol) {
		if debugSyntax {
			fmt.Printf("skipped while recovering: %v (%s)\n", symbolName(p.next.symbol), lexer.Text())
		}
		switch Token(p.next.symbol) {
		case NOSUBSTITUTIONTEMPLATE:
			p.listener(NoSubstitutionTemplate, p.next.offset, p.next.endoffset)
		case TEMPLATEHEAD:
			p.listener(TemplateHead, p.next.offset, p.next.endoffset)
		case TEMPLATEMIDDLE:
			p.listener(TemplateMiddle, p.next.offset, p.next.endoffset)
		case TEMPLATETAIL:
			p.listener(TemplateTail, p.next.offset, p.next.endoffset)
		}
		e = p.next.endoffset
		p.fetchNext(lexer, stack, nil)
	}
	return e
}

// willShift checks if "symbol" is going to be shifted in the given state.
// This function does not support empty productions and returns false if they occur before "symbol".
func (p *Parser) willShift(stackPos int, state int16, symbol int32, stack []stackEntry) bool {
	if state == -1 {
		return false
	}

	for state != p.endState {
		action := tmAction[state]
		if action < -2 {
			action = lalr(action, symbol)
		}

		if action >= 0 {
			// Reduce.
			rule := action
			ln := int(tmRuleLen[rule])
			if ln == 0 {
				// we do not support empty productions
				return false
			}
			stackPos -= ln - 1
			state = gotoState(stack[stackPos-1].state, tmRuleSymbol[rule])
		} else {
			return action == -1 && gotoState(state, symbol) >= 0
		}
	}
	return symbol == eoiToken
}

func (p *Parser) reportIgnoredToken(tok symbol) {
	var t NodeType
	switch Token(tok.symbol) {
	case MULTILINECOMMENT:
		t = MultiLineComment
	case SINGLELINECOMMENT:
		t = SingleLineComment
	case INVALID_TOKEN:
		t = InvalidToken
	default:
		return
	}
	if debugSyntax {
		fmt.Printf("ignored: %v as %v\n", Token(tok.symbol), t)
	}
	p.listener(t, tok.offset, tok.endoffset)
}
