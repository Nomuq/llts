// generated by Textmapper; DO NOT EDIT

package llts

import (
	"context"
	"fmt"
)

// ErrorHandler is called every time a parser is unable to process some part of the input.
// This handler can return false to abort the parser.
type ErrorHandler func(err SyntaxError) bool

// StopOnFirstError is an error handler that forces the parser to stop on and return the first
// error.
func StopOnFirstError(_ SyntaxError) bool { return false }

// Parser is a table-driven LALR parser for ts.
type Parser struct {
	eh ErrorHandler
	listener Listener

	next      symbol
	endState  int16
}

type SyntaxError struct {
	Line      int
	Offset    int
	Endoffset int
}

func (e SyntaxError) Error() string {
	return fmt.Sprintf("syntax error at line %v", e.Line)
}

type symbol struct {
	symbol    int32
	offset    int
	endoffset int
}

type stackEntry struct {
	sym   symbol
	state int16
}

func (p *Parser) Init(eh ErrorHandler, l Listener) {
	p.eh = eh
	p.listener = l
}

const (
	startStackSize = 256
	startTokenBufferSize = 16
	noToken        = int32(UNAVAILABLE)
	eoiToken       = int32(EOI)
	debugSyntax    = false
)

func (p *Parser) Parse(ctx context.Context, lexer *Lexer) error {
	return p.parse(ctx, 7, 6264, lexer)
}

type session struct {
	shiftCounter int32
	cache map[uint64]bool
}

func (p *Parser) parse(ctx context.Context, start, end int16, lexer *Lexer) error {
	ignoredTokens := make([]symbol, 0, startTokenBufferSize) // to be reported with the next shift
	var s session
	s.cache = make(map[uint64]bool)
	state := start
	var lastErr SyntaxError
	recovering := 0

	var alloc [startStackSize]stackEntry
	stack := append(alloc[:0], stackEntry{state: state})
	p.endState = end
	ignoredTokens = p.fetchNext(lexer, stack, ignoredTokens)

	for state != end {
		action := tmAction[state]
		if action < -2 {
			// Lookahead is needed.
			if p.next.symbol == noToken {
				ignoredTokens = p.fetchNext(lexer, stack, ignoredTokens)
			}
			action = lalr(action, p.next.symbol)
		}

		if action >= 0 {
			// Reduce.
			rule := action
			ln := int(tmRuleLen[rule])

			var entry stackEntry
			entry.sym.symbol = tmRuleSymbol[rule]
			rhs := stack[len(stack)-ln:]
			stack = stack[:len(stack)-ln]
			if ln == 0 {
				entry.sym.offset, _ = lexer.Pos()
				entry.sym.endoffset = entry.sym.offset
			} else {
				entry.sym.offset = rhs[0].sym.offset
				entry.sym.endoffset = rhs[ln-1].sym.endoffset
			}
			if err := p.applyRule(ctx, rule, &entry, rhs, lexer, &s); err != nil {
			  return err
			}
			if debugSyntax {
				fmt.Printf("reduced to: %v\n", Symbol(entry.sym.symbol))
			}
			state = gotoState(stack[len(stack)-1].state, entry.sym.symbol)
			entry.state = state
			stack = append(stack, entry)

		} else if action == -1 {
			if s.shiftCounter++; s.shiftCounter & 0x1ff == 0 {
				// Note: checking for context cancellation is expensive so we do it from time to time.
				select {
				case <-ctx.Done():
					return ctx.Err()
				default:
				}
			}

			// Shift.
			if p.next.symbol == noToken {
				p.fetchNext(lexer, stack, nil)
			}
			state = gotoState(state, p.next.symbol)
			stack = append(stack, stackEntry{
				sym:   p.next,
				state: state,
			})
			if debugSyntax {
				fmt.Printf("shift: %v (%s)\n", Symbol(p.next.symbol), lexer.Text())
			}
			if len(ignoredTokens) > 0 {
				for _, tok := range ignoredTokens {
					p.reportIgnoredToken(tok)
				}
				ignoredTokens = ignoredTokens[:0]
			}
			if state != -1 && p.next.symbol != eoiToken {
				p.next.symbol = noToken
			}
			if recovering > 0 {
				recovering--
			}
		}

		if action == -2 || state == -1 {
			if recovering == 0 {
				offset, endoffset := lexer.Pos()
				lastErr = SyntaxError{
					Line: lexer.Line(),
					Offset:    offset,
					Endoffset: endoffset,
				}
				if !p.eh(lastErr) {
					return lastErr
				}
			}
			if len(ignoredTokens) > 0 {
				for _, tok := range ignoredTokens {
					p.reportIgnoredToken(tok)
				}
				ignoredTokens = ignoredTokens[:0]
			}
			if stack = p.recoverFromError(lexer, stack); stack == nil {
				return lastErr
			}
			state = stack[len(stack)-1].state
			recovering = 4
		}
	}

	return nil
}

const errSymbol = 2

// willShift checks if "symbol" is going to be shifted in the given state.
// This function does not support empty productions and returns false if they occur before "symbol".
func (p *Parser) willShift(stackPos int, state int16, symbol int32, stack []stackEntry) bool {
	if state == -1 {
		return false
	}

	for state != p.endState {
		action := tmAction[state]
		if action < -2 {
			action = lalr(action, symbol)
		}

		if action >= 0 {
			// Reduce.
			rule := action
			ln := int(tmRuleLen[rule])
			if ln == 0 {
				// we do not support empty productions
				return false
			}
			stackPos -= ln - 1
			state = gotoState(stack[stackPos-1].state, tmRuleSymbol[rule])
		} else {
			return action == -1 && gotoState(state, symbol) >= 0
		}
	}
	return symbol == eoiToken
}

func (p *Parser) skipBrokenCode(lexer *Lexer, stack []stackEntry, canRecover func (symbol int32) bool) int {
	var e int
	for p.next.symbol != eoiToken && !canRecover(p.next.symbol) {
		e = p.next.endoffset
		p.fetchNext(lexer, stack, nil)
	}
	return e
}

func (p *Parser) recoverFromError(lexer *Lexer, stack []stackEntry) []stackEntry {
	var recoverSyms [1 + NumTokens/8]uint8
	var recoverPos []int

	for size := len(stack); size > 0; size-- {
		if gotoState(stack[size-1].state, errSymbol) == -1 {
			continue
		}
		recoverPos = append(recoverPos, size)
		if recoveryScopeStates[int(stack[size-1].state)] {
			break
		}
	}
	if len(recoverPos) == 0 {
		return nil
	}

	for _, v := range afterErr {
		recoverSyms[v/8] |= 1 << uint32(v%8)
	}
	canRecover := func (symbol int32) bool {
		return recoverSyms[symbol/8]&(1<<uint32(symbol%8)) != 0
	}
	if p.next.symbol == noToken {
		p.fetchNext(lexer, stack, nil)
	}
	s := p.next.offset
	e := s
	for {
		if endoffset := p.skipBrokenCode(lexer, stack, canRecover); endoffset > e {
			e = endoffset
		}

		var matchingPos int
		for _, pos := range recoverPos {
			if p.willShift(pos, gotoState(stack[pos-1].state, errSymbol), p.next.symbol, stack) {
				matchingPos = pos
				break
			}
		}
		if matchingPos == 0 {
			if p.next.symbol == eoiToken {
				return nil
			}
			recoverSyms[p.next.symbol/8] &^= 1 << uint32(p.next.symbol%8)
			continue
		}

		if matchingPos < len(stack) {
			s = stack[matchingPos].sym.offset
		}
		stack = append(stack[:matchingPos], stackEntry{
			sym:   symbol{errSymbol, s, e},
			state: gotoState(stack[matchingPos-1].state, errSymbol),
		})
		return stack
	}
	return nil
}

func lalr(action, next int32) int32 {
	a := -action - 3
	for ; tmLalr[a] >= 0; a += 2 {
		if tmLalr[a] == next {
			break
		}
	}
	return tmLalr[a+1]
}

func gotoState(state int16, symbol int32) int16 {
	min := tmGoto[symbol]
	max := tmGoto[symbol+1]

	if max-min < 32 {
		for i := min; i < max; i += 2 {
			if tmFromTo[i] == state {
				return tmFromTo[i+1]
			}
		}
	} else {
		for min < max {
			e := (min + max) >> 1 &^ int32(1)
			i := tmFromTo[e]
			if i == state {
				return tmFromTo[e+1]
			} else if i < state {
				min = e + 2
			} else {
				max = e
			}
		}
	}
	return -1
}

func (p *Parser) fetchNext(lexer *Lexer, stack []stackEntry, ignoredTokens []symbol) []symbol {
restart:
	token := lexer.Next()
	switch token {
	case MULTILINECOMMENT, SINGLELINECOMMENT, INVALID_TOKEN:
		s, e := lexer.Pos()
		tok := symbol{int32(token), s, e}
		if ignoredTokens == nil {
			p.reportIgnoredToken(tok)
		} else {
			ignoredTokens = append(ignoredTokens, tok)
		}
		goto restart
	}
	p.next.symbol = int32(token)
	p.next.offset, p.next.endoffset = lexer.Pos()
	return ignoredTokens
}

func lookaheadNext(lexer *Lexer) int32 {
restart:
	tok := lexer.Next()
	switch tok {
	case MULTILINECOMMENT, SINGLELINECOMMENT, INVALID_TOKEN:
		goto restart
	}
	return int32(tok)
}

func lookaheadRule(ctx context.Context, lexer *Lexer, next, rule int32, s *session) (sym int32, err error) {
	switch rule {
	case 4066:
		var ok bool
		if ok, err = lookahead(ctx, lexer, next, 0, 6256, s); ok {
			sym = 682 /* lookahead_StartOfArrowFunction */;
		} else {
			sym = 161 /* lookahead_notStartOfArrowFunction */;
		}
		return
	case 4067:
		var ok bool
		if ok, err = lookahead(ctx, lexer, next, 3, 6259, s); ok {
			sym = 763 /* lookahead_StartOfTypeImport */;
		} else {
			sym = 762 /* lookahead_notStartOfTypeImport */;
		}
		return
	case 4068:
		var ok bool
		if ok, err = lookahead(ctx, lexer, next, 1, 6257, s); ok {
			sym = 326 /* lookahead_StartOfParametrizedCall */;
		} else {
			sym = 282 /* lookahead_notStartOfParametrizedCall */;
		}
		return
	case 4069:
		var ok bool
		if ok, err = lookahead(ctx, lexer, next, 4, 6260, s); ok {
			sym = 784 /* lookahead_StartOfIs */;
		} else {
			sym = 789 /* lookahead_notStartOfIs */;
		}
		return
	case 4070:
		var ok bool
		if ok, err = lookahead(ctx, lexer, next, 6, 6262, s); ok {
			sym = 822 /* lookahead_StartOfMappedType */;
		} else {
			sym = 812 /* lookahead_notStartOfMappedType */;
		}
		return
	case 4071:
		var ok bool
		if ok, err = lookahead(ctx, lexer, next, 5, 6261, s); ok {
			sym = 831 /* lookahead_StartOfFunctionType */;
		} else {
			sym = 805 /* lookahead_notStartOfFunctionType */;
		}
		return
	case 4072:
		var ok bool
		if ok, err = lookahead(ctx, lexer, next, 2, 6258, s); ok {
			sym = 738 /* lookahead_StartOfExtendsTypeRef */;
		} else {
			sym = 737 /* lookahead_notStartOfExtendsTypeRef */;
		}
		return
	}
	return 0, nil
}

func AtStartOfArrowFunction(ctx context.Context, lexer *Lexer, next int32, s *session) (bool, error) {
	return lookahead(ctx, lexer, next, 0, 6256, s);
}

func AtStartOfParametrizedCall(ctx context.Context, lexer *Lexer, next int32, s *session) (bool, error) {
	return lookahead(ctx, lexer, next, 1, 6257, s);
}

func AtStartOfExtendsTypeRef(ctx context.Context, lexer *Lexer, next int32, s *session) (bool, error) {
	return lookahead(ctx, lexer, next, 2, 6258, s);
}

func AtStartOfTypeImport(ctx context.Context, lexer *Lexer, next int32, s *session) (bool, error) {
	return lookahead(ctx, lexer, next, 3, 6259, s);
}

func AtStartOfIs(ctx context.Context, lexer *Lexer, next int32, s *session) (bool, error) {
	return lookahead(ctx, lexer, next, 4, 6260, s);
}

func AtStartOfFunctionType(ctx context.Context, lexer *Lexer, next int32, s *session) (bool, error) {
	return lookahead(ctx, lexer, next, 5, 6261, s);
}

func AtStartOfMappedType(ctx context.Context, lexer *Lexer, next int32, s *session) (bool, error) {
	return lookahead(ctx, lexer, next, 6, 6262, s);
}

func lookahead(ctx context.Context, l *Lexer, next int32, start, end int16, s *session) (bool, error) {
	var lexer Lexer = *l

	// Use memoization for recursive lookaheads.
	if next == noToken {
		next = lookaheadNext(&lexer)
	}
	key := uint64(l.tokenOffset) + uint64(end)<<40
	if ret, ok := s.cache[key]; ok {
		return ret, nil
	}

	var allocated [64]stackEntry
	state := start
	stack := append(allocated[:0], stackEntry{state: state})

	for state != end {
		action := tmAction[state]
		if action < -2 {
			// Lookahead is needed.
			if next == noToken {
				next = lookaheadNext(&lexer)
			}
			action = lalr(action, next)
		}

		if action >= 0 {
			// Reduce.
			rule := action
			ln := int(tmRuleLen[rule])

			var entry stackEntry
			entry.sym.symbol = tmRuleSymbol[rule]
			stack = stack[:len(stack)-ln]
			sym, err := lookaheadRule(ctx, &lexer, next, rule, s)
			if err != nil {
				return false, err
			}
			if sym != 0 {
				entry.sym.symbol = sym
			}
			state = gotoState(stack[len(stack)-1].state, entry.sym.symbol)
			entry.state = state
			stack = append(stack, entry)

		} else if action == -1 {
			if s.shiftCounter++; s.shiftCounter & 0x1ff == 0 {
				// Note: checking for context cancellation is expensive so we do it from time to time.
				select {
				case <-ctx.Done():
					return false, ctx.Err()
				default:
				}
			}

			// Shift.
			if next == noToken {
				next = lookaheadNext(&lexer)
			}
			state = gotoState(state, next)
			stack = append(stack, stackEntry{
				sym:   symbol{symbol: next},
				state: state,
			})
			if state != -1 && next != eoiToken {
				next = noToken
			}
		}

		if action == -2 || state == -1 {
			break
		}
	}

	s.cache[key] = state == end
	return state == end, nil
}

func (p *Parser) applyRule(ctx context.Context, rule int32, lhs *stackEntry, rhs []stackEntry, lexer *Lexer, s *session) (err error) {
	switch rule {
	case 1097: // Elision : ','
				p.listener(NoElement, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 1098: // Elision : Elision ','
				p.listener(NoElement, rhs[1].sym.offset, rhs[1].sym.endoffset)
	case 1166: // LiteralPropertyName : PrivateIdentifier
				p.listener(NameIdent, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 1170: // LiteralPropertyName_WithoutNew : PrivateIdentifier
				p.listener(NameIdent, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 1280: // MemberExpression_Await_StartWithLet : 'let'
				p.listener(ReferenceIdent, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 1429: // MemberExpression_StartWithLet : 'let'
				p.listener(ReferenceIdent, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 1434: // MemberExpression_StartWithLet_Yield : 'let'
				p.listener(ReferenceIdent, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 2277: // BinaryExpression : BinaryExpression .noLineBreak 'as' 'const'
				p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2295: // BinaryExpression_Await : BinaryExpression_Await .noLineBreak 'as' 'const'
				p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2314: // BinaryExpression_Await_In : BinaryExpression_Await_In .noLineBreak 'as' 'const'
				p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2350: // BinaryExpression_Await_In_NoObjLiteral : BinaryExpression_Await_In_NoObjLiteral .noLineBreak 'as' 'const'
				p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2369: // BinaryExpression_Await_In_Yield : BinaryExpression_Await_In_Yield .noLineBreak 'as' 'const'
				p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2403: // BinaryExpression_Await_NoLet : BinaryExpression_Await_NoLet .noLineBreak 'as' 'const'
				p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2421: // BinaryExpression_Await_NoObjLiteral : BinaryExpression_Await_NoObjLiteral .noLineBreak 'as' 'const'
				p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2439: // BinaryExpression_Await_Yield : BinaryExpression_Await_Yield .noLineBreak 'as' 'const'
				p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2458: // BinaryExpression_In : BinaryExpression_In .noLineBreak 'as' 'const'
				p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2511: // BinaryExpression_In_NoFuncClass : BinaryExpression_In_NoFuncClass .noLineBreak 'as' 'const'
				p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2530: // BinaryExpression_In_NoObjLiteral : BinaryExpression_In_NoObjLiteral .noLineBreak 'as' 'const'
				p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2549: // BinaryExpression_In_Yield : BinaryExpression_In_Yield .noLineBreak 'as' 'const'
				p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2599: // BinaryExpression_NoLet : BinaryExpression_NoLet .noLineBreak 'as' 'const'
				p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2617: // BinaryExpression_NoLet_Yield : BinaryExpression_NoLet_Yield .noLineBreak 'as' 'const'
				p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2635: // BinaryExpression_NoObjLiteral : BinaryExpression_NoObjLiteral .noLineBreak 'as' 'const'
				p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 2653: // BinaryExpression_Yield : BinaryExpression_Yield .noLineBreak 'as' 'const'
				p.listener(TsConst, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3076: // ElementElision : ','
				p.listener(NoElement, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 3077: // ElementElision : Elision ','
				p.listener(NoElement, rhs[1].sym.offset, rhs[1].sym.endoffset)
	case 3135: // IterationStatement : 'for' '(' 'var' VariableDeclarationList ';' .forSC ForCondition ';' .forSC ForFinalExpression ')' Statement
				p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3139: // IterationStatement : 'for' '(' 'var' ForBinding 'in' Expression_In ')' Statement
				p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3142: // IterationStatement : 'for' '(' 'async' lookahead_notStartOfArrowFunction 'of' AssignmentExpression_In ')' Statement
				p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
		p.listener(IdentExpr, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3143: // IterationStatement : 'for' '(' 'var' ForBinding 'of' AssignmentExpression_In ')' Statement
				p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3149: // IterationStatement_Await : 'for' '(' 'var' VariableDeclarationList_Await ';' .forSC ForCondition_Await ';' .forSC ForFinalExpression_Await ')' Statement_Await
				p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3153: // IterationStatement_Await : 'for' '(' 'var' ForBinding_Await 'in' Expression_Await_In ')' Statement_Await
				p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3156: // IterationStatement_Await : 'for' '(' 'async' lookahead_notStartOfArrowFunction 'of' AssignmentExpression_Await_In ')' Statement_Await
				p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
		p.listener(IdentExpr, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3157: // IterationStatement_Await : 'for' '(' 'var' ForBinding_Await 'of' AssignmentExpression_Await_In ')' Statement_Await
				p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3163: // IterationStatement_Yield : 'for' '(' 'var' VariableDeclarationList_Yield ';' .forSC ForCondition_Yield ';' .forSC ForFinalExpression_Yield ')' Statement_Yield
				p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3167: // IterationStatement_Yield : 'for' '(' 'var' ForBinding_Yield 'in' Expression_In_Yield ')' Statement_Yield
				p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3170: // IterationStatement_Yield : 'for' '(' 'async' lookahead_notStartOfArrowFunction 'of' AssignmentExpression_In_Yield ')' Statement_Yield
				p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
		p.listener(IdentExpr, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3171: // IterationStatement_Yield : 'for' '(' 'var' ForBinding_Yield 'of' AssignmentExpression_In_Yield ')' Statement_Yield
				p.listener(Var, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3518: // ImportDeclaration : 'import' lookahead_StartOfTypeImport 'type' ImportClause FromClause ';'
				p.listener(TsTypeOnly, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3525: // ImportRequireDeclaration : 'export' 'import' lookahead_notStartOfTypeImport BindingIdentifier '=' 'require' '(' StringLiteral ')' ';'
				p.listener(TsExport, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 3545: // ExportDeclaration : 'export' 'type' '*' 'as' ImportedBinding FromClause ';'
				p.listener(TsTypeOnly, rhs[1].sym.offset, rhs[1].sym.endoffset)
	case 3546: // ExportDeclaration : 'export' 'type' '*' FromClause ';'
				p.listener(TsTypeOnly, rhs[1].sym.offset, rhs[1].sym.endoffset)
	case 3549: // ExportDeclaration : 'export' 'type' ExportClause FromClause ';'
				p.listener(TsTypeOnly, rhs[1].sym.offset, rhs[1].sym.endoffset)
	case 3551: // ExportDeclaration : 'export' 'type' ExportClause ';'
				p.listener(TsTypeOnly, rhs[1].sym.offset, rhs[1].sym.endoffset)
	case 3573: // DecoratorMemberExpression : DecoratorMemberExpression '.' IdentifierName
				p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3587: // TypePredicate : 'asserts' lookahead_StartOfIs 'is' Type1
				p.listener(ReferenceIdent, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 3589: // TypePredicate1 : 'asserts' lookahead_StartOfIs 'is' Type1
				p.listener(ReferenceIdent, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 3590: // AssertsType : 'asserts' .noLineBreak lookahead_notStartOfIs 'this' 'is' Type
				p.listener(This, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3591: // AssertsType : 'asserts' .noLineBreak lookahead_notStartOfIs 'this'
				p.listener(This, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3592: // AssertsType : 'asserts' .noLineBreak lookahead_notStartOfIs IdentifierName_WithoutKeywords 'is' Type
				p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3593: // AssertsType : 'asserts' .noLineBreak lookahead_notStartOfIs IdentifierName_WithoutKeywords
				p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3594: // AssertsType1 : 'asserts' .noLineBreak lookahead_notStartOfIs 'this' 'is' Type1
				p.listener(This, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3595: // AssertsType1 : 'asserts' .noLineBreak lookahead_notStartOfIs 'this'
				p.listener(This, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3596: // AssertsType1 : 'asserts' .noLineBreak lookahead_notStartOfIs IdentifierName_WithoutKeywords 'is' Type1
				p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3597: // AssertsType1 : 'asserts' .noLineBreak lookahead_notStartOfIs IdentifierName_WithoutKeywords
				p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3627: // TypeOperator : 'infer' IdentifierName
				p.listener(ReferenceIdent, rhs[1].sym.offset, rhs[1].sym.endoffset)
	case 3632: // TypeOperator1 : 'infer' IdentifierName
				p.listener(ReferenceIdent, rhs[1].sym.offset, rhs[1].sym.endoffset)
	case 3792: // TypeQueryExpression : TypeQueryExpression '.' IdentifierName
				p.listener(ReferenceIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
	case 3931: // IndexSignature : Modifiers '[' IdentifierName ':' 'string' ']' TypeAnnotation
				p.listener(NameIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
		p.listener(PredefinedType, rhs[4].sym.offset, rhs[4].sym.endoffset)
	case 3932: // IndexSignature : '[' IdentifierName ':' 'string' ']' TypeAnnotation
				p.listener(NameIdent, rhs[1].sym.offset, rhs[1].sym.endoffset)
		p.listener(PredefinedType, rhs[3].sym.offset, rhs[3].sym.endoffset)
	case 3933: // IndexSignature : Modifiers '[' IdentifierName ':' 'number' ']' TypeAnnotation
				p.listener(NameIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
		p.listener(PredefinedType, rhs[4].sym.offset, rhs[4].sym.endoffset)
	case 3934: // IndexSignature : '[' IdentifierName ':' 'number' ']' TypeAnnotation
				p.listener(NameIdent, rhs[1].sym.offset, rhs[1].sym.endoffset)
		p.listener(PredefinedType, rhs[3].sym.offset, rhs[3].sym.endoffset)
	case 3935: // IndexSignature_WithDeclare : Modifiers_WithDeclare '[' IdentifierName ':' 'string' ']' TypeAnnotation
				p.listener(NameIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
		p.listener(PredefinedType, rhs[4].sym.offset, rhs[4].sym.endoffset)
	case 3936: // IndexSignature_WithDeclare : '[' IdentifierName ':' 'string' ']' TypeAnnotation
				p.listener(NameIdent, rhs[1].sym.offset, rhs[1].sym.endoffset)
		p.listener(PredefinedType, rhs[3].sym.offset, rhs[3].sym.endoffset)
	case 3937: // IndexSignature_WithDeclare : Modifiers_WithDeclare '[' IdentifierName ':' 'number' ']' TypeAnnotation
				p.listener(NameIdent, rhs[2].sym.offset, rhs[2].sym.endoffset)
		p.listener(PredefinedType, rhs[4].sym.offset, rhs[4].sym.endoffset)
	case 3938: // IndexSignature_WithDeclare : '[' IdentifierName ':' 'number' ']' TypeAnnotation
				p.listener(NameIdent, rhs[1].sym.offset, rhs[1].sym.endoffset)
		p.listener(PredefinedType, rhs[3].sym.offset, rhs[3].sym.endoffset)
	case 3948: // EnumDeclaration : 'const' 'enum' BindingIdentifier EnumBody
				p.listener(TsConst, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 3974: // AmbientVariableDeclaration : 'var' AmbientBindingList ';'
				p.listener(Var, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 3975: // AmbientVariableDeclaration : 'let' AmbientBindingList ';'
				p.listener(LetOrConst, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 3976: // AmbientVariableDeclaration : 'const' AmbientBindingList ';'
				p.listener(LetOrConst, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 3990: // AmbientEnumDeclaration : 'const' 'enum' BindingIdentifier EnumBody
				p.listener(TsConst, rhs[0].sym.offset, rhs[0].sym.endoffset)
	case 4066:
		var ok bool
		if ok, err = AtStartOfArrowFunction(ctx, lexer, p.next.symbol, s); ok {
			lhs.sym.symbol = 682 /* lookahead_StartOfArrowFunction */;
		} else {
			lhs.sym.symbol = 161 /* lookahead_notStartOfArrowFunction */;
		}
		return
	case 4067:
		var ok bool
		if ok, err = AtStartOfTypeImport(ctx, lexer, p.next.symbol, s); ok {
			lhs.sym.symbol = 763 /* lookahead_StartOfTypeImport */;
		} else {
			lhs.sym.symbol = 762 /* lookahead_notStartOfTypeImport */;
		}
		return
	case 4068:
		var ok bool
		if ok, err = AtStartOfParametrizedCall(ctx, lexer, p.next.symbol, s); ok {
			lhs.sym.symbol = 326 /* lookahead_StartOfParametrizedCall */;
		} else {
			lhs.sym.symbol = 282 /* lookahead_notStartOfParametrizedCall */;
		}
		return
	case 4069:
		var ok bool
		if ok, err = AtStartOfIs(ctx, lexer, p.next.symbol, s); ok {
			lhs.sym.symbol = 784 /* lookahead_StartOfIs */;
		} else {
			lhs.sym.symbol = 789 /* lookahead_notStartOfIs */;
		}
		return
	case 4070:
		var ok bool
		if ok, err = AtStartOfMappedType(ctx, lexer, p.next.symbol, s); ok {
			lhs.sym.symbol = 822 /* lookahead_StartOfMappedType */;
		} else {
			lhs.sym.symbol = 812 /* lookahead_notStartOfMappedType */;
		}
		return
	case 4071:
		var ok bool
		if ok, err = AtStartOfFunctionType(ctx, lexer, p.next.symbol, s); ok {
			lhs.sym.symbol = 831 /* lookahead_StartOfFunctionType */;
		} else {
			lhs.sym.symbol = 805 /* lookahead_notStartOfFunctionType */;
		}
		return
	case 4072:
		var ok bool
		if ok, err = AtStartOfExtendsTypeRef(ctx, lexer, p.next.symbol, s); ok {
			lhs.sym.symbol = 738 /* lookahead_StartOfExtendsTypeRef */;
		} else {
			lhs.sym.symbol = 737 /* lookahead_notStartOfExtendsTypeRef */;
		}
		return
	}
	nt := ruleNodeType[rule]
	if nt != 0 {
		p.listener(nt, lhs.sym.offset, lhs.sym.endoffset)
	}
	return
}

func (p *Parser) reportIgnoredToken(tok symbol) {
	var t NodeType
	switch Token(tok.symbol) {
	case MULTILINECOMMENT:
		t = MultiLineComment
	case SINGLELINECOMMENT:
		t = SingleLineComment
	case INVALID_TOKEN:
		t = InvalidToken
	default:
		return
	}
	p.listener(t, tok.offset, tok.endoffset)
}
